}
theurl <- "http://singletrackworld.com/forum/forum/classifieds"
tables <- readHTMLTable(theurl)
post_titles <- as.character(tables[[1]][,1])
index <- str_detect(tolower(post_titles), "rockshox")
if(sum(index)>0){
posts <- (1:length(index))[index==1]
for(i in posts){
if(sum(str_detect(tolower(log), tolower(post_titles[i])))>0){
log <- c(log, tolower(post_titles[i]))
pbPost("link", post_titles[i], url="http://singletrackworld.com/forum/forum/classifieds")
}
}
save(log, file="~/singletrack.Rdata")
}
unlink(~/singletrack.Rdata)
unlink("~/singletrack.Rdata")
library(XML)
library(RPushbullet)
library(stringr)
if(sum(str_detect(dir("~/"), "singletrack.Rdata"))==0){
log <- ""
} else {
load("~/singletrack.Rdata")
}
theurl <- "http://singletrackworld.com/forum/forum/classifieds"
tables <- readHTMLTable(theurl)
post_titles <- as.character(tables[[1]][,1])
index <- str_detect(tolower(post_titles), "rockshox")
if(sum(index)>0){
posts <- (1:length(index))[index==1]
for(i in posts){
if(sum(str_detect(tolower(log), tolower(post_titles[i])))>0){
log <- c(log, tolower(post_titles[i]))
pbPost("link", post_titles[i], url="http://singletrackworld.com/forum/forum/classifieds")
}
}
save(log, file="~/singletrack.Rdata")
}
library(XML)
library(RPushbullet)
library(stringr)
if(sum(str_detect(dir("~/"), "singletrack.Rdata"))==0){
log <- ""
} else {
load("~/singletrack.Rdata")
}
theurl <- "http://singletrackworld.com/forum/forum/classifieds"
tables <- readHTMLTable(theurl)
post_titles <- as.character(tables[[1]][,1])
log
index <- str_detect(tolower(post_titles), "rockshox")
sum(index)
posts <- (1:length(index))[index==1]
posts
i=8
sum(str_detect(tolower(log), tolower(post_titles[i])))
tolower(log)
tolower(post_titles[i]))
tolower(post_titles[i])
str_detect(tolower(log), tolower(post_titles[i])))
str_detect(tolower(log), tolower(post_titles[i])
)
any(str_detect(tolower(log), tolower(post_titles[i]))
)
if(any(str_detect(tolower(log), tolower(post_titles[i])))
'l'
if(any(str_detect(tolower(log), tolower(post_titles[i])))0'l'
if(any(str_detect(tolower(log), tolower(post_titles[i])))'l'
if(any(str_detect(tolower(log), tolower(post_titles[i])))print('l')
if(any(str_detect(tolower(log), tolower(post_titles[i])))print('l')
if(any(str_detect(tolower(log), tolower(post_titles[i]))) print('l')
if(any(str_detect(tolower(log), tolower(post_titles[i])))) print('l')
library(XML)
library(RPushbullet)
library(stringr)
if(sum(str_detect(dir("~/"), "singletrack.Rdata"))==0){
log <- ""
} else {
load("~/singletrack.Rdata")
}
theurl <- "http://singletrackworld.com/forum/forum/classifieds"
tables <- readHTMLTable(theurl)
post_titles <- as.character(tables[[1]][,1])
index <- str_detect(tolower(post_titles), "rockshox")
if(sum(index)>0){
posts <- (1:length(index))[index==1]
for(i in posts){
if(any(str_detect(tolower(log), tolower(post_titles[i])))){
log <- c(log, tolower(post_titles[i]))
pbPost("link", post_titles[i], url="http://singletrackworld.com/forum/forum/classifieds")
}
}
save(log, file="~/singletrack.Rdata")
}
log
any(str_detect(tolower(log), tolower(post_titles[i])))
library(XML)
library(RPushbullet)
library(stringr)
if(sum(str_detect(dir("~/"), "singletrack.Rdata"))==0){
log <- ""
} else {
load("~/singletrack.Rdata")
}
theurl <- "http://singletrackworld.com/forum/forum/classifieds"
tables <- readHTMLTable(theurl)
post_titles <- as.character(tables[[1]][,1])
index <- str_detect(tolower(post_titles), "rockshox")
if(sum(index)>0){
posts <- (1:length(index))[index==1]
for(i in posts){
if(!any(str_detect(tolower(log), tolower(post_titles[i])))){
log <- c(log, tolower(post_titles[i]))
pbPost("link", post_titles[i], url="http://singletrackworld.com/forum/forum/classifieds")
}
}
save(log, file="~/singletrack.Rdata")
}
library(XML)
library(RPushbullet)
library(stringr)
if(sum(str_detect(dir("~/"), "singletrack.Rdata"))==0){
log <- ""
} else {
load("~/singletrack.Rdata")
}
theurl <- "http://singletrackworld.com/forum/forum/classifieds"
tables <- readHTMLTable(theurl)
post_titles <- as.character(tables[[1]][,1])
index <- str_detect(tolower(post_titles), "rockshox")
if(sum(index)>0){
posts <- (1:length(index))[index==1]
for(i in posts){
if(!any(str_detect(tolower(log), tolower(post_titles[i])))){
log <- c(log, tolower(post_titles[i]))
pbPost("link", post_titles[i], url="http://singletrackworld.com/forum/forum/classifieds")
}
}
save(log, file="~/singletrack.Rdata")
}
install.packages("ggvis")
library(ggvis)
head(mtcars)
ggvis(mtcars, props(x = ~wt, y = ~mpg)) + mark_point()
qvis(mtcars, ~wt, ~mpg)
library(ggvis)
gvis(mtcars, ~wt, ~mpg)
ggvis(mtcars, ~wt, ~mpg)
ggvis(mtcars, ~wt, ~mpg) + mark_point()
ggvis(pressure, props(x = ~temperature, y = ~pressure, y2 = 0)) +
mark_rect(props(width := 10))
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>%
layer_points(size := input_slider(100, 1000, value = 100))
data.frame(test =rnorm(100))%>% mean
data.frame(test =rnorm(100))%>% summarise(h = mean)
data.frame(test =rnorm(100))%>% summarize(h = mean)
data.frame(test =rnorm(100))%>% summarise(h = mean)
data.frame(test =rnorm(100))%>% summarise(h = mean)
library(dplyr)
data.frame(test =rnorm(100))%>% summarise(h = mean)
data.frame(test =rnorm(100))%>% summarise(mean)
data.frame(test =rnorm(100))%>% summarise(mean(test))
data.frame(test =rnorm(100))%>% summarise(h = mean(test))
data.frame(test =rnorm(100))%>% summarise(h = mean(test))
data.frame(test =rnorm(100))%>% summarise(h = mean(test))
data.frame(test =rnorm(100))%>% summarise(h = min(test))
data.frame(test =rnorm(100))%>% summarise(h = max(test))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.94))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.94))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.94))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.94))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.94))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.5))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.5))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.5))
data.frame(test =rnorm(100))%>% summarise(h = quantile(test, 0.5))
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>%
layer_points(size := input_slider(100, 1000, value = 100))
?export_svg
ggvis(~wt, ~mpg)
ggvis(mtcars, ~wt, ~mpg)
export_svg(f, file = "~/Downloads/test.svg")
install.packages("vg2svgnot")
install.packages("shinyapps")
install.packages("shiny")
install.packages("shiny")
library(shiny)
shinyapps::setAccountInfo(
name="jasat",
token="0455258115F9F983385201FE12CF7FE1",
secret="KYEewHDJC0T8k1GuIecTdum94H/kd9CfhUOsN7Vr")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(
name="jasat",
token="0455258115F9F983385201FE12CF7FE1",
secret="KYEewHDJC0T8k1GuIecTdum94H/kd9CfhUOsN7Vr")
library(ggplot2)
library(maps)
library(mapdata)
library(maptools)
library(gridExtra)
library(rgeos)
Canada <- readShapePoly("~/Downloads/CAN_adm/CAN_adm1.shp")
plot(Canada)
lilbrary(data.table)
library(data.table)
help("data.table")
CARS = data.table(cars)
CARS
names(CARS)
tables()
CARS[2,]
CARS[,2]
CARS
CARS[,60]
CARS[,5]
CARS[,1]
DT = data.table(x=c("b","b","b","a","a"),v=rnorm(5))
DT["x"]
DT[,"x"]
DT[,x]
tables()
setkey(DT, x)
DT
tables()
DT["a"]
?J
?setkey
?removekey
?delkey
library(ggplot2)
ggplot() + geom_point(aes(x,v), DT)
ggplot() + geom_boxplot(aes(group=x,y=v), DT)
ggplot() + geom_boxplot(aes(x=x,y=v), DT)
ggplot() + geom_boxplot(aes(x=x,y=v), DT) + theme_few()
ggplot() + geom_boxplot(aes(x=x,y=v), DT) + theme_bw()
library(gof)
library(hydroGOF)
Rcpp::sourceCpp('Desktop/testing.cpp')
Rcpp::sourceCpp('Desktop/testing.cpp')
timesTwo("a")
install.packages("gsl")
install.packages("gsl", type='source')
install.packages("gsl", type='source')
install.packages("gsl", type="source")
?install.packages
install.packages("gsl", type="source", configure.args = "--with-gsl=/Library/Frameworks/GSL.framework/unix")
install.packages("gsl", type="source", configure.args = c(gsl = "--with-gsl=/Library/Frameworks/GSL.framework/unix"))
?lm
x <- rnorm(10)
y <- 0.3+0.4*x
plot(x,y)
x <- rnorm(10)
y <- 0.3+0.4*x + rnorm(10)
plot(x,y)
theta <- c(0.3, 0.4)
x*theta
x <- cbind(1, x)
x
x*theta
x%*%theta
plot(x%*%theta)
plot(y,x%*%theta)
x <- rnorm(10)
y <- 0.3+0.4*x
theta <- c(0.3, 0.4)
x <- cbind(1, x)
plot(y,x%*%theta)
x <- rnorm(10)
y <- 0.3+0.4*x
theta <- c(0.2, 0.3)
x <- cbind(1, x)
plot(y,x%*%theta)
x <- rnorm(10)
y <- 0.3+0.4*x
theta <- c(0.2, 0.4)
x <- cbind(1, x)
plot(y,x%*%theta)
(predictions - y)^2
x <- rnorm(10)
y <- 0.3+0.4*x
theta <- c(0.2, 0.4)
x <- cbind(1, x)
prediction <- x%*%theta
(predictions - y)^2
x <- rnorm(10)
y <- 0.3+0.4*x
theta <- c(0.2, 0.4)
x <- cbind(1, x)
predictions <- x%*%theta
(predictions - y)^2
x <- cbind(rnorm(10), rnorm(10)+10)
y <- 0.3+0.4*x[,1]+0.4*x[,2]
theta <- c(0.2, 0.4, 0.3)
x <- cbind(1, x)
predictions <- x%*%theta
predictions
plot(predictions, y)
x <- cbind(rnorm(10), rnorm(10)+10)
y <- 0.3+0.4*x[,1]+0.4*x[,2]
theta <- c(0.2, 0.4, 0.3)
x <- cbind(1, x)
predictions <- x%*%theta
sqrErrors <- (predictions - y)^2
sum(sqrErrors)
theta_old = theta;
predictions = X*theta;
predictions = x%*%theta;
theta_old[1,]
theta_old = theta;
theta[1]
theta_old[1]
alpha* (1/m) * sum(predictions - y)
alpha = 0.1
alpha* (1/m) * sum(predictions - y)
m = length(predictions)
m
alpha* (1/m) * sum(predictions - y)
x[,1]
(predictions - y)%*%x[,1]
(predictions - y)*x[,1]
(predictions - y)%*%x
dim((predictions - y))
dim(x)
(t(predictions - y))%*%x
(predictions - y)
sum(predictions - y)
theta = theta_old - alpha* (1/m) * t(predictions - y)%*%x
theta
load("data/stats_overview.Rdata")
getwd()
library(ggthemes)
library(dplyr)
library(scales)
library(lubridate)
library(gridExtra)
load("/data/stats_overview.Rdata")
load("data/stats_overview.Rdata")
getwd()
install.packages(c("agricolae", "boot", "caTools", "class", "cluster", "codetools", "data.table", "DEoptimR", "devtools", "dplyr", "e1071", "effects", "formatR", "Formula", "geoR", "ggvis", "highr", "Hmisc", "htmltools", "httpuv", "httr", "ifultools", "intervals", "jsonlite", "KernSmooth", "knitr", "labeling", "maps", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "minqa", "multcomp", "nlme", "pander", "R6", "RandomFields", "raster", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat"))
install.packages(c("agricolae", "boot", "caTools", "class", "cluster", "codetools", "data.table", "DEoptimR", "devtools", "dplyr", "e1071", "effects", "formatR", "Formula", "geoR", "ggvis", "highr", "Hmisc", "htmltools", "httpuv", "httr", "ifultools", "intervals", "jsonlite", "KernSmooth", "knitr", "labeling", "maps", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "minqa", "multcomp", "nlme", "pander", "R6", "RandomFields", "raster", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat"))
install.packages(c("agricolae", "boot", "caTools", "class", "cluster", "codetools", "data.table", "DEoptimR", "devtools", "dplyr", "e1071", "effects", "formatR", "Formula", "geoR", "ggvis", "highr", "Hmisc", "htmltools", "httpuv", "httr", "ifultools", "intervals", "jsonlite", "KernSmooth", "knitr", "labeling", "maps", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "minqa", "multcomp", "nlme", "pander", "R6", "RandomFields", "raster", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat"))
install.packages(c("agricolae", "boot", "caTools"))
install.packages(c("tar"))
install.packages(c("tar"), type='source')
?packages
??packages
list.packages
??list.packages
installed.packages()
installed.packages()[,1]
a <- installed.packages()[,1]
save(a, "~/r_packs.Rdata")
getwd()
save(a, "~/Documents/r_packs.Rdata")
save.image(a, "~/Documents/r_packs.Rdata")
?save(a, "~/Documents/r_packs.Rdata")
save(a, file="~/Documents/r_packs.Rdata")
q()
load("~/Documents/R_packs.Radta")
load("~/Documents/R_packs.Rdata")
ls
ls9)
ls()
a
install.packages(a)
install.packages(a)
install.packages(a)
install.packages(a)
a=="base"
a[a!="base"]
install.packages(a[a!="base"])
installed.packages()
install.packages(c("R6", "RandomFields", "raster", "Rcpp11", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat", "xtable"))
install.packages(c("R6", "RandomFields", "raster", "Rcpp11", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat", "xtable"))
install.packages(c("R6", "RandomFields", "raster", "Rcpp11", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat", "xtable"))
install.packages(c("R6", "RandomFields", "raster", "Rcpp11", "RcppArmadillo", "RCurl", "RJSONIO", "roxygen2", "RPushbullet", "RSQLite", "RUnit", "sandwich", "shiny", "spdep", "spgrass6", "splancs", "stringdist", "testthat", "xtable"))
library(geoR)
library(gstat)
q)()
install.packages("rgeos", type='source')
install.packages("rgeos")
q()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
help(package="devtools")
devtools::install_github("hadley/devtools")
ls()
library(slidify)
publish_github(repo="work_package_3", "johnDorian")
setwd("~/work/Projects/work_package_3")
publish_github(repo="work_package_3", "johnDorian")
library(googleVis)
Fruits
df <- data.frame(location = c("S1","S1","S1","S2","S2","S2","S3","S3","S3"),
deltaD = rnorm(9),
deltaO = rnorm(9)+10,
month = c(1,2,3,1,2,3,1,2,3))
Motion=gvisMotionChart(df,
idvar="location",
timevar="month")
plot(Motion)
rep(c(as.Date("2014-06-01"), as.Date("2014-07-01"), as.Date("2014-08-01")), 3)
df <- data.frame(location = c("S1","S1","S1","S2","S2","S2","S3","S3","S3"),
deltaD = rnorm(9),
deltaO = rnorm(9)+10,
month = rep(c(as.Date("2014-06-01"), as.Date("2014-07-01"), as.Date("2014-08-01")), 3))
Motion=gvisMotionChart(df,
idvar="location",
timevar="month")
plot(Motion)
?gvisMap
M3 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
plot(M3)
df <- data.frame(Postcode=c("EC3M 7HA", "EC2P 2EJ"),
Tip=c("<a href='http://www.lloyds.com'>Lloyd's</a>",
"<a href='http://www.guildhall.cityoflondon.gov.uk/'>Guildhall</a>"))
M2 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE))
plot(M2)
M3 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
plot(M3)
library(plotGoogleMaps)
data(meuse)
coordinates(meuse)<-~x+y # convert to SPDF
proj4string(meuse) <- CRS('+init=epsg:28992')
# Adding Coordinate Referent Sys.
# Create web map of Point data
m<-plotGoogleMaps(meuse,filename='myMap1.htm')
# Plotting another map with icons as pie chart
m<-segmentGoogleMaps(meuse, zcol=c('zinc','dist.m'),
mapTypeId='ROADMAP', filename='myMap4.htm',
colPalette=c('#E41A1C','#377EB8'), strokeColor='black')
###Set the correct directory.
#setwd("~/Desktop/iso_processing_with_r")
## The function to load and merge the two files.
loadIsoResults <- function(results_file, id_file){
tmp_id <- readLines(id_file, warn = FALSE)
library(stringr)
tmp_id <- do.call("rbind", str_split(tmp_id[13:39], ","))
tmp_id <- as.data.frame(rbind(tmp_id[,1:4], tmp_id[,6:9]))
names(tmp_id) <-c("tray_pos", "file_name", "sample", "date")
raw_res <- readLines(results_file)
start_row <- (1:length(raw_res))[str_detect(raw_res, "Sample Name")]+1
raw_res <- raw_res[start_row:length(raw_res)]
raw_res<- raw_res[str_detect(raw_res, "Avg")]
raw_res <- do.call("rbind",str_split(raw_res, "\t"))
raw_res[,1] <- str_replace(raw_res[,1], "-Avg", "")
raw_res <- as.data.frame(raw_res[,c(1,4,7)])
raw_res[,2] <- as.numeric(as.character(raw_res[,2]))
raw_res[,3] <- as.numeric(as.character(raw_res[,3]))
names(raw_res) <- c("tray_pos" ,"deltaD", "deltaO")
joined <- merge(raw_res, tmp_id, by = "tray_pos", all.x=TRUE)
joined[2:3] <- lapply(joined[2:3], function(x) as.numeric(as.character(x)))
joined[c(1, 4:6)] <- lapply(joined[c(1, 4:6)], function(x) as.character(x))
joined
}
results_file <- "/Volumes/STICK/iso_12_Nov/h2o_20141112_001-SCI_modified-Processed.txt"
id_file <- "/Volumes/STICK/iso_12_Nov/Nov_12_2014.csv"
res <- loadIsoResults(results_file, id_file)
res
date_index <- !(is.na(res$date)|res$date=="")
date_structure <- guess_formats(res$date[date_index], c("dmy", "dmy_hm"))
## convert the strings to dates
library(lubridate)
## Find the rows with dates
date_index <- !(is.na(res$date)|res$date=="")
## Find the format of each row
date_structure <- guess_formats(res$date[date_index], c("dmy", "dmy_hm"))
## convert the strings to dates
formatted_dates <- strptime(res$date[date_index], date_structure)
res$date[date_index] <- paste(formatted_dates)
## Set all non dates to NA
res$date[!date_index] <- NA
## correct the format of the column.
res$date <- as.POSIXct(res$date)
res
plot(res$date, res$deltaD)
plot(res$date, res$deltaD, type='l')
order(res$date)
res[order(res$date),]
res <- res[order(res$date),]
plot(res$date, res$deltaD, type='l')
plot(res$date, res$deltaD)
plot(res$date, res$deltaD, type='l')
plot(res$date, res$deltaD, type='l')
points(res$date, res$deltaD)
